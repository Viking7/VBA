1. '//Pull value from a single cell like --- =GetTheValue("D:\","test.xls","Sheet1","B4:B5")
Function GetTheValue(wbPath, wbName, wsName, cellRef)
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim tmp As Range
    Dim SQLQuery As String
    
    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset

    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
          "Data Source=" & wbPath & wbName & ";" & _
          "Extended Properties=""Excel 8.0;"""  

    SQLQuery = "SELECT * FROM [" & wsName & "$" & cellRef & "]"
    Debug.Print SQLQuery
    rs.Open SQLQuery, cn

    GetTheValue = rs.Fields(0).Value

    rs.Close
    cn.Close
    Set rs = Nothing
    Set cn = Nothing
End Function


2. '//Pull value from a single cell like ----- =getValue("D:\test.xls","Sheet1","B4")

    Function getValue(ByVal wbPath As String, ByVal wsName As String, ByVal cellRef As String)

        Dim cn As ADODB.Connection
        Dim rs As ADODB.Recordset
        Dim SQLQuery As String
        
        Set cn = New ADODB.Connection
        Set rs = New ADODB.Recordset
    
        cn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
              "Data Source=" & wbPath & ";" & _
              "Extended Properties=""Excel 8.0;HDR = No;""" 'HDR = No leads the connection to treat first row as data too
        
        cellRef = cellRef & ":" & cellRef 'CreateRef(cellRef) '& ":" & ExtractStr(cellRef) & ExtractNum(cellRef) + 1
        
        SQLQuery = "SELECT * FROM [" & wsName & "$" & cellRef & "]"
        Debug.Print SQLQuery
        
        Set rs = cn.Execute(SQLQuery, , adCmdText)
       
        getValue = rs(0).Value
     
        rs.Close
        cn.Close
        Set rs = Nothing
        Set cn = Nothing

    End Function
    
    Private Function CreateRef(strIn As String) As String
        Dim objRegex
        Set objRegex = CreateObject("vbscript.regexp")
        With objRegex
         .Global = True
         .Pattern = "([^\d]+)([0-9]+)"
        
        strOut = .Replace(strIn, "$1") & .Replace(strIn, "$2") - 1 & ":" & strIn
        
        CreateRef = strOut
        End With
    End Function

3. '//Pull value from a single cell using ExecuteExcel4Macro

    Function GetData(wbPath As String, wbName As String, wsName As String, cellRef As String)

        Dim Ret As String
        Static XL As Application ' To just have one additional instance
        
    '    wbPath = "\\enterprise\ABC\"
    '    wbName = "XYZ.xlsx"
    '    wsName = "Sheet1"
    '    cellRef = "A2"
        
        'Create a second instance of Excel in memory (ExecuteExcel4Macro doesn't work in cell formulas in same instance)
        If XL Is Nothing Then Set XL = CreateObject("Excel.Application")
        'Debug.Print "Created new instance"
        Ret = "'" & wbPath & "[" & wbName & "]" & _
              wsName & "'!" & Range(cellRef).Address(True, True, xlR1C1)
        'Debug.Print Ret
        x = XL.ExecuteExcel4Macro(Ret)
        'End If
        Debug.Print x
        GetData = x
    End Function

    Function DDE(ByVal Reference As String) As Variant
      Static XL As Application
      On Error Resume Next
      If XL Is Nothing Then Set XL = CreateObject("Excel.Application")
      DDE = XL.ExecuteExcel4Macro(Application.ConvertFormula(Reference, xlA1, xlR1C1, True))
      Debug.Print "worked"
    End Function


4. '//Pull value from range name

Public Function ImportDataUDF(strpath As String, RangeName As Variant) As Variant

    Dim lrow As Long, wbMain As Workbook, cell As Range, Rng As Range, i As Long
    Application.ScreenUpdating = False
    
    Dim SQLQuery As String
        SQLQuery = "Select * FROM " & RangeName
            
        Set cn = New ADODB.Connection
        Set rs = New ADODB.Recordset
                        
        cn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source = " & strpath & ";Extended Properties=""Excel 12.0 Xml;HDR=NO"";"
                                      
       On Error GoTo ErrHandler
       rs.Open SQLQuery, cn
    
          aux = rs(0).Value
          Select Case IsNumeric(aux)
              Case Is = True
               ImportDataUDF = CDbl(aux)
              Exit Function
              Case Else
               ImportDataUDF = aux
              Exit Function
          End Select
          
          rs.Close
          Set cn = Nothing
          Set rs = Nothing
          
    Application.ScreenUpdating = True
    
    Exit Function

ErrHandler:
    
    Dim strMsg As String
        strMsg = "Error " & Err.Number & " (" & Err.Description _
        & ")"
        MsgBox strMsg
    Exit Function
End Function

5. '//Pull value from range name (Sub)
Sub ImportData()
    
    Dim strpath As String, lrow As Long, wbMain As Workbook, cell As Range, Rng As Range, i As Long
    Application.ScreenUpdating = False
    
    Dim SQLQuery() As Variant, arrRecord As Variant, SQLQuery2 As String, SQLQuery3 As String
        SQLQuery = Array("Select * FROM NameA", " Select * FROM NameB", "Select * FROM NameC")
 
 Start = Timer
    Set wbMain = ThisWorkbook
    Set ws = wbMain.Sheets(1)
        lrow = ws.Range("A" & rows.Count).End(xlUp).Row
    Set Rng = ws.Range("A2:A" & lrow)
    Call ProgressBar
    For Each cell In Rng
            i = cell.Row
            strpath = cell.Value
                                                      
            Call ProgressBarUpdate(i, lrow, strpath)
            
            Set cn = New ADODB.Connection
            Set rs = New ADODB.Recordset
                        
            cn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source = " & strpath & ";Extended Properties=""Excel 12.0 Xml;HDR=NO"";"
                                                       
            'If cn.State = adStateClosed Then GoTo ErrFileNotFound
                                  
            On Error GoTo ErrHandler
         col = 2
         For x = LBound(SQLQuery) To UBound(SQLQuery)
            'x = 1
            ReDim arrRecord(x + 1)
            Set rs = cn.Execute(SQLQuery(x), , adCmdText)
            
            'Pass recordset to a variant variable (array if needed)
            arrRecord = rs.GetRows
            Cells(cell.Row, col).Value = arrRecord
            col = col + 1
         Next x
         
            Set rs = Nothing
            Set cn = Nothing
            Set rs = Nothing
    Next cell

    Unload Progress
    Application.ScreenUpdating = True
    
        finish = Timer
        MsgBox (Start - finish) & " seconds have elapsed."
    Exit Sub
'ErrFileNotFound:
'        Unload Progress
'        MsgBox "File" & strPath & "was not found." & vbNewLine & "Please re-check the address and confirm if the file exists in the location."
'    Exit Sub
    
ErrHandler:
    Unload Progress
    Dim strMsg As String
        strMsg = "Error " & Err.Number & " (" & Err.Description _
        & ")"
        MsgBox strMsg
    Exit Sub
End Sub


6. '// Get Sheet Names from Closed Workbook Method #1
    Public Function GetSheetNames(strpath As String) As Variant

        Dim i As Long, arrSheetNames() As String
        Application.ScreenUpdating = False


            Set cn = New ADODB.Connection
            Set rs = New ADODB.Recordset

            'cn.Open "Provider=Microsoft.ACE.OLEDB.12.0;Data Source = " & strpath & ";Extended Properties=""Excel 12.0 Xml;HDR=NO"";"

                If Right(strpath, 3) = "xls" Then
                    cn.Open "Provider=Microsoft.Jet.OLEDB.4.0;" & _
                          "Data Source=" & strpath & ";" & _
                          "Extended Properties=""Excel 8.0;HDR=No;IMEX=1;"""
                Else
                    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0;" & _
                          "Data Source=" & strpath & ";" & _
                          "Extended Properties=""Excel 8.0;HDR=No;IMEX=1;""" 'HDR = No leads the connection to treat first row as data too
                End If


           On Error GoTo ErrHandler
           Set rs = cn.OpenSchema(adSchemaTables)

             Do While Not rs.EOF
                sSheetName = rs.Fields("table_name").Value
    '            Debug.Print sSheetName
                If sSheetName Like "*$*" And sSheetName Like "*DCF*" And Not sSheetName Like "*_xlnm*" And Not sSheetName Like "*dateadj*" And Not sSheetName Like "*Print*" Then
                    ReDim Preserve arrSheetNames(i)
                    arrSheetNames(i) = Replace(sSheetName, "$", "")
                    i = i + 1
                End If
                rs.MoveNext
             Loop

             GetSheetNames = Join(arrSheetNames, ",")

              rs.Close
              Set cn = Nothing
              Set rs = Nothing

        Application.ScreenUpdating = True

        Exit Function

    ErrHandler:

        Dim strMsg As String
            strMsg = "Error " & Err.Number & " (" & Err.Description _
            & ")"
            MsgBox strMsg
        Exit Function
    End Function

7.. '//Get Sheet Names from Closed Workbook Method #2
        'Set references to Microsoft ActiveX Data objects 2.8 Library and Microsoft ADO Ext. 2.8 for DDL and Security.
        
    Option Explicit
    Public mySheetname$
    Public bln As Boolean

    Function GetSheetsNames(WBName As String) As Collection
    Dim objConn As ADODB.Connection
    Dim objCat As ADOX.Catalog
    Dim tbl As ADOX.Table
    Dim sConnString As String
    Dim sSheet As String
    Dim Col As New Collection
    sConnString = "Provider=Microsoft.Jet.OLEDB.4.0;" & _
    "Data Source=" & WBName & ";" & _
    "Extended Properties=Excel 8.0;"
    Set objConn = New ADODB.Connection
    objConn.Open sConnString
    Set objCat = New ADOX.Catalog
    Set objCat.ActiveConnection = objConn
    For Each tbl In objCat.Tables
    sSheet = tbl.Name
    sSheet = Application.Substitute(sSheet, "'", "")
    sSheet = Left(sSheet, InStr(1, sSheet, "$", 1) - 1)
    On Error Resume Next
    Col.Add sSheet, sSheet
    On Error GoTo 0
    Next tbl
    Set GetSheetsNames = Col
    objConn.Close
    Set objCat = Nothing
    Set objConn = Nothing
    End Function

    Sub SheetExistsClosed()
    mySheetname = InputBox("Enter sheet name to check for existence:", "Sheet name verification", "Sheet1")
    If mySheetname = "" Then Exit Sub

    bln = False
    Dim Col As Collection, Book As String, i As Long
    Book = "C:\Your\File\Path\YourFileName.xls"
    Set Col = GetSheetsNames(Book)

    For i = 1 To Col.count
    If mySheetname = Col(i) Then
    bln = True
    Exit For
    End If
    Next i

    If bln = True Then
    'Sheet name does exist in that workbook of interest
    MsgBox mySheetname & " exists in the subject workbook.", 64, "OK to proceed"
    Else
    'Sheet name does NOT exist in that workbook of interest
    MsgBox mySheetname & " does NOT exist in the subject workbook.", 64, "Do not proceed"
    End If
    End Sub
