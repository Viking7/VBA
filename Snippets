1. '//Show 'Format cells' dialog box:
  Application.CommandBars("Worksheet Menu Bar").Controls("Format").Controls("Cells...").Execute
  Application.Dialogs(xlDialogFormatNumber).Show
  
2. '//Show SavesAs dialogue box and name new file:
  a. bFileSaveAs = Application.Dialogs(xlDialogSaveAs).Show(, 6)
  Or,
  b. vFile = Application.GetSaveAsFilename(InitialFileName:=".xlsb", _
        FileFilter:="Excel Binary files (*.xlsb), *.xlsb, All files (*.*), *.*")
    
      '(xlExcel12 = 50,  Excel Binary Workbook in 2007-2010 with or without macro's, xlsb)
      If vFile <> False Then ThisWorkbook.SaveAs Filename:=vFile, FileFormat:=xlExcel12

3. '//Enable editing in ProtectedView Files
    Application.ActiveProtectedViewWindow.Edit
  
  a. 'Application.ProtectedViewWindows.Open Filename:="C:\Users\Zangetsu\Desktop\test\Source A.xls"
      'Workbooks("Source A.xls[Protected View]").Activate
      'With Excel.Application
      '    .ActiveWindow.ActivateNext
      'End With
      Application.ActiveProtectedViewWindow.Edit
    Or,
  b.  Windows("Book1").Activate
      ActiveWindow.ActivateNext
      Application.ActiveProtectedViewWindow.Edit

4. '// Offset from Userform Controls Linked Cell - ControlsMaster
     Sub ControlsMaster()
        Debug.Print Application.Caller
        x = ActiveSheet.Shapes(Application.Caller).ControlFormat.LinkedCell
        Range(x).Offset(0, 1).Value = Now()
      End Sub

5. MouseOver Function
    Public Function OnMouseOver()
      ActiveWorkbook.FollowHyperlink "filepath\filename.pdf"
    End Function
    'In the cell Use the following formula:
      =IFERROR(HYPERLINK(OnMouseOver(),"Text"),"TextError")


 6. '//Check if Sheetname exists in a Worksheet
    Function CheckSheetName(sheet_name As String) As Boolean
      Dim ws As Worksheet
      On Error Resume Next
      Set ws = Worksheets(sheet_name)
      If ws Is Nothing Then CheckSheetName = False Else CheckSheetName = True
    End Function

 7. '//Check if File is open via Freefile method
    Function IsFileOpen(filename As String)
       Dim filenum As Integer, errnum As Integer

       On Error Resume Next 
       filenum = FreeFile() 
       ' Attempt to open the file and lock it.
       Open filename For Input Lock Read As #filenum
       Close filenum          ' Close the file.
       errnum = Err           ' Save the error number that occurred.
       On Error GoTo 0        

       ' Check to see which error occurred.
       Select Case errnum

           ' No error occurred.
           ' File is NOT already open by another user.
           Case 0
               IsFileOpen = False

           ' Error number for "Permission Denied."
           ' File is already opened by another user.
           Case 70
               IsFileOpen = True

           ' Another error occurred.
           Case Else
               Error errnum
       End Select
    End Function

  8. '//Concat Strings function
    Function AConcat(Sep As String, ParamArray ArgList() As Variant) As String
  	 Dim Arg As Variant
  	 Dim cell As Range
  	 Dim Element As Variant
  	 
  	 For Each Arg In ArgList
  		  If TypeOf Arg Is Range Then
  			  For Each cell In Arg.Cells
  				 AConcat = AConcat & cell.value & Sep
  			 Next cell
  		  ElseIf IsArray(Arg) Then
  			  For Each Element In Arg
  				 AConcat = AConcat & Element & Sep
  			 Next Element
  		  Else
  			  AConcat = AConcat & Arg & Sep
  		  End If
  	  Next Arg
  	 
  	 AConcat = Left(AConcat, Len(AConcat) - Len(Sep))
   End Function

  9. '//List all files in a folder
      Sub ListFiles()
         Set obbj as createobject("scripting . filesystem")
         Set obbjfolder as obbj.getfolder(strpath)
         I=1
         For each obj in obbjfolder.files
         Cells(I+1,1).obj.name
         Next obj
      End Sub
         
  10. '//List Files in a folder and sub-folders (with user prompt for Top directory)
      Option Explicit

      Sub ListFiles()
          'Set a reference to Microsoft Scripting Runtime by using
          'Tools > References in the Visual Basic Editor (Alt+F11)
          'Declare the variables
          Dim objFSO As Scripting.FileSystemObject
          Dim objTopFolder As Scripting.Folder
          Dim strTopFolderName As String
      
          'Insert the headers for Columns A through F
          Range("A1").Value = "File Name"
          Range("B1").Value = "File Size"
          Range("C1").Value = "File Type"
          Range("D1").Value = "Date Created"
          Range("E1").Value = "Date Last Accessed"
          Range("F1").Value = "Date Last Modified"
          Range("G1").Value = "Path"
      
          'Assign the top folder to a variable
          strTopFolderName = GetFolder("H:\Desktop")
      
          'Create an instance of the FileSystemObject
          Set objFSO = CreateObject("Scripting.FileSystemObject")
      
          'Get the top folder
          Set objTopFolder = objFSO.GetFolder(strTopFolderName)
      
          'Call the RecursiveFolder routine
          Call RecursiveFolder(objTopFolder, True)
      
          'Change the width of the columns to achieve the best fit
          Columns.AutoFit
      
      End Sub
      
      Sub RecursiveFolder(objFolder As Scripting.Folder, IncludeSubFolders As Boolean)
         'Declare the variables
          Dim objFile As Scripting.File
          Dim objSubFolder As Scripting.Folder
          Dim NextRow As Long
      
          'Find the next available row
          NextRow = Cells(Rows.Count, "A").End(xlUp).Row + 1
      
          'Loop through each file in the folder
          For Each objFile In objFolder.Files
              Cells(NextRow, "A").Value = objFile.Name
              Cells(NextRow, "B").Value = objFile.Size
              Cells(NextRow, "C").Value = objFile.Type
              Cells(NextRow, "D").Value = objFile.DateCreated
              Cells(NextRow, "E").Value = objFile.DateLastAccessed
              Cells(NextRow, "F").Value = objFile.DateLastModified
              Cells(NextRow, "G").Value = objFile.Path
              NextRow = NextRow + 1
          Next objFile
      
          'Loop through files in the subfolders
          If IncludeSubFolders Then
              For Each objSubFolder In objFolder.SubFolders
                  Call RecursiveFolder(objSubFolder, True)
              Next objSubFolder
          End If
      End Sub
      
      Function GetFolder(strPath As String) As String
        Dim fldr As FileDialog
        Dim sItem As String
        Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
        With fldr
            .Title = "Select a Folder"
            .AllowMultiSelect = False
            .InitialFileName = strPath
            If .Show <> -1 Then GoTo NextCode
            sItem = .SelectedItems(1)
        End With
        NextCode:
        GetFolder = sItem
        Set fldr = Nothing
      End Function

11. '//Export range as temp image and paste to Footer to evade character limit

    Sub CopyFootnotesAndSaveAsImageToGetAroundTheStupidCharacterLimitInExcelFooters()
  
    Dim objPic As Shape
    Dim objChart As Chart
    
    ActiveWindow.DisplayGridlines = False
    Call Sheets(2).Range("R17", "T19").CopyPicture(xlScreen, xlPicture)
    ActiveWindow.DisplayGridlines = True
    
    Sheets(2).Shapes.AddChart
    Sheets(2).Activate
    Sheets(2).Shapes.Item(1).Select
    
    Set objChart = ActiveChart
    ActiveChart.Parent.Name = "FooterChart"
    
    objChart.Paste
    Selection.Name = "FooterImage"
    ActiveSheet.ChartObjects("FooterChart").Activate
    
    Sheets(2).Shapes.Item(1).Line.Visible = msoFalse
    Sheets(2).Shapes.Item(1).Height = Range("R17", "T19").Height
    Sheets(2).Shapes.Item(1).Width = Range("R17", "T19").Width
    ActiveChart.Shapes.Range(Array("FooterImage")).Height = Range("R17", "T19").Height
    ActiveChart.Shapes.Range(Array("FooterImage")).Width = Range("R17", "T19").Width
    
    objChart.Export ("D:\Temp.jpg")
    
    End Sub   

12. '//Change the ReadWrite Access of a User for a Workbook based on a password

    Private Sub Workbook_Open()
      ThisWorkbook.ChangeFileAccess xlReadOnly
    End Sub
  
    Sub UnlockDeveloper()
      Dim pwd As String
      
      pwd = InputBox("Enter developer password:", "Password")
      
      If pwd = "password" Then
          If ThisWorkbook.ReadOnly = True Then
              ThisWorkbook.ChangeFileAccess xlReadWrite
          End If
      Else
          MsgBox ("Incorrect password.")
      End If
    End Sub

13. '//Test if Data is filtered after Autofilter
    Sub TestFiltered() 
        Dim rngFilter As Range 
        Dim r As Long, f As Long 
        Set rngFilter = ActiveSheet.AutoFilter.Range 
        r = rngFilter.Rows.Count 
        f = rngFilter.SpecialCells(xlCellTypeVisible).Count 
        If r > f Then MsgBox "Data is Filtered" 
    End Sub

14. '//Save New version of Activeworkbook at the same location
    Sub SaveNewVersion()
      Dim fileName As String, index As Long, ext As String
      arr = Split(ActiveWorkbook.Name, ".")
      ext = arr(UBound(arr))
      If InStr(ActiveWorkbook.Name, "_v") = 0 Then
           
          fileName = ActiveWorkbook.Path & "\" & Left(ActiveWorkbook.Name, InStr(ActiveWorkbook.Name, ".") - 1) & "_v1." & ext
          ActiveWorkbook.SaveAs (fileName)
      Else
          index = CInt(Split(Right(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - InStr(ActiveWorkbook.Name, "_v") - 1), ".")(0))
          index = index + 1
          fileName = ActiveWorkbook.Path & "\" & Left(ActiveWorkbook.Name, InStr(ActiveWorkbook.Name, "_v") - 1) & "_v" & index & "." & ext
      End If
      ActiveWorkbook.SaveAs (fileName)
    End Sub
    
15. '//SaveCopyAs - to save an open workbook as another file. Can't change format of the file

    SaveFileName = "C:\Users\Vikram\Desktop\Cash Activity Test " & Format(Date, "m.d.yy") & ".xlsx" 
    ActiveWorkbook.SaveCopyAs Filename:=SaveFileName
    
    OR
    
    'Can't use this on an open file
    Dim BaseDirectory As String
    Dim OpenFileName As String
    Dim OldFileName As String
    Dim NewFileName As String
    
    BaseDirectory = "E:\New folder\"
    OpenFileName = "Book1.xlsx" 'OR ActiveWorkbook.Name
    OldFileName = Mid(OpenFileName, 1, Len(OpenFileName) - 5)
     
    NewFileName = BaseDirectory & OldFileName & " - " & (Year(Now) - 1) & ".xlsx"
    FileCopy "E:\New folder\" & OpenFileName, NewFileName

    OR
    
    'Can change the format
    Sub saveAsXlsx()
        Dim mySheetList() As String
        ReDim mySheetList(0 To (ThisWorkbook.Sheets.Count) - 2)
        Dim a As Integer
        a = 0
        For Each ws In ActiveWorkbook.Worksheets
            If Not ws.Name = "main" Then
                mySheetList(a) = ws.Name
                a = a + 1
            End If
        Next ws
    
        NewFileName = "C:\Users\Vikram\Desktop\Cash Activity Test " & Format(Date, "m.d.yy") & ".xlsx"
       
        i = 1
        If Dir(NewFileName) <> "" Then
            Do While x = False
                SaveFileName = Left(NewFileName, Len(NewFileName) - 5) & " (" & i & ").xlsx"
                If Dir(SaveFileName) = "" Then
                    x = True
                End If
                i = i + 1
            Loop
        End If
        Debug.Print SaveFileName
        Worksheets(mySheetList).Copy
        ActiveWorkbook.SaveAs Filename:=NewFileName, FileFormat:=xlWorkbookDefault 'default ext
    End Sub

16. '// Split a Workbook (create new workbook for each sheet)

    Sub SplitWorkbook()
    Dim FileExtStr As String
    Dim FileFormatNum As Long
    Dim xWs As Worksheet
    Dim xWb As Workbook
    Dim FolderName As String
    Application.ScreenUpdating = False
    Set xWb = Application.ThisWorkbook
    DateString = Format(Now, "yyyy-mm-dd hh-mm-ss")
    FolderName = xWb.Path & "\" & xWb.Name & " " & DateString
    MkDir FolderName
    For Each xWs In xWb.Worksheets
        xWs.Copy
    
        xFile = FolderName & "\" & Application.ActiveWorkbook.Sheets(1).Name & FileExtStr
        Application.ActiveWorkbook.SaveAs xFile, FileFormat:=FileFormatNum
        Application.ActiveWorkbook.Close False
    Next
    MsgBox "You can find the files in " & FolderName
    Application.ScreenUpdating = True
    End Sub

17. '//Add IFERROR to all formulas in selected cells    

    Sub Add_IFERROR_Activesheet()
    Dim myCell As Range
    Cells.SpecialCells(xlCellTypeFormulas, 23).Select
    For Each myCell In Selection.Cells
        If myCell.HasFormula And Not myCell.HasArray Then
            myCell.Formula = "=IFERROR(" & Right(myCell.Formula, Len(myCell.Formula) - 1) & ",0)"
        End If
    Next
    End Sub
    
 18. '//convert m d y dates to Number
 
    Function MDYToNum(strCell As String)

    Dim aCell() As String, i As Long, j As Long, y As Long, m As Long, d As Long

    aCell = Split(strCell, " ")

    For i = LBound(aCell) To UBound(aCell)
            Select Case Right(aCell(i), 1)
                Case "y"
                    y = Replace(aCell(i), "y", "")
                Case "m"
                    m = Replace(aCell(i), "m", "")
                Case "d"
                    d = Replace(aCell(i), "d", "")
            End Select
    Next i

    On Error GoTo ErrHandler

    MDYToNum = y + m / 12 + d / 365
    Exit Function

    ErrHandler:
        MDYToNum = "An error occured. Please Check input"
        Resume Next

    End Function
