1. '//ProgressBar Function
   Sub ProgressBarUpdate(ByVal i As Long, rows As Long, strpath As String, DoingWhat As String)
         '~~>Progress bar update
        Dim Done As Double
            Done = i / rows
        With Progress
            .Label1.Caption = DoingWhat
            .FrameProgress.Caption = Format(Done, "0%")
            .LabelProgress.Width = Done * (.FrameProgress.Width - 10)
            .Label2.Caption = "Current File: " & strpath
        End With
        DoEvents 'updates form
   End Sub

   Sub ProgressBar() 'Set modal property of Userform to 'True' to continue running after the userform shows
        Progress.LabelProgress.Width = 0
        Progress.Show
   End Sub


2. '//Make ProgressBar or other userforms Modeless (Always on Top of all windows)

      Option Explicit 
       'API function to enable/disable the Excel Window
      Private Declare Function FindWindowA Lib "user32" _ 
      (ByVal lpClassName As String, ByVal lpWindowName As String) As Long 

      Private Declare Function EnableWindow Lib "user32" _ 
      (ByVal hwnd As Long, ByVal bEnable As Long) As Long 

      Private Declare Function SetWindowPos Lib "user32" ( _ 
      ByVal hwnd As Long, ByVal hWndInsertAfter As Long, _ 
      ByVal X As Long, ByVal Y As Long, ByVal cx As Long, _ 
      ByVal cy As Long, ByVal wFlags As Long) As Long 

      Private Const SWP_NOSIZE = &H1 
      Private Const SWP_NOMOVE = &H2 
      Private Const FLAGS As Long = SWP_NOMOVE Or SWP_NOSIZE 
      Private Const HWND_TOPMOST = -1 
      Private Const HWND_NOTOPMOST = -2 
      Private mlHWnd As Long 
      Private mbDragDrop As Boolean 
      Private FormHWnd As Long 

      Private Sub cmdNotTop_Click() 
          SetWindowPos FormHWnd, HWND_NOTOPMOST, 0, 0, 0, 0, FLAGS 
      End Sub 

      Private Sub cmdTop_Click() 
          SetWindowPos FormHWnd, HWND_TOPMOST, 0, 0, 0, 0, FLAGS 
      End Sub 

      Private Sub UserForm_Activate() 
          On Error Resume Next 
           'Find the Excel main window
          mlHWnd = FindWindowA("XLMAIN", Application.Caption) 
          FormHWnd = FindWindowA(vbNullString, Me.Caption) 
          Call cmdTop_Click 
           'Enable the Window - makes the userform modeless
          EnableWindow mlHWnd, 1 
          mbDragDrop = Application.CellDragAndDrop 
          Application.CellDragAndDrop = False 
      End Sub 

      Private Sub btnOK_Click() 
          Application.CellDragAndDrop = mbDragDrop 
          Call cmdNotTop_Click 
          Unload Me 
      End Sub 



3. Run common macro from multiple checkboxes
   '//Class Module - Class1
      Option Explicit
      Public WithEvents CBXGroup As MSForms.CheckBox
      Private Sub CBXGroup_Change()
      '    With CBXGroup
      '        MsgBox .Name & vbLf & .Value
      '    End With
      
      Call Module1.TestActiveX
      
      End Sub
    
    '//Code Module
        'http://msgroups.net/microsoft.public.excel.programming/change-event-does-not-fire/18616
        ' For grouping Activex checkboxes on workbook open
        Option Explicit
        Dim ChkBoxes() As New Class1
        Sub Auto_Open()
            Dim CBXCount As Long
            Dim OLEObj As OLEObject
                
            CBXCount = 0
            For Each OLEObj In ThisWorkbook.Worksheets("sheet2").OLEObjects
                If TypeOf OLEObj.Object Is MSForms.CheckBox Then
                    CBXCount = CBXCount + 1
                    ReDim Preserve ChkBoxes(1 To CBXCount)
                    Set ChkBoxes(CBXCount).CBXGroup = OLEObj.Object
                End If
            Next OLEObj
        End Sub

        Sub Test()
        
        Dim lrow As Long, rRange As Range, r As Range, arrList() As String, Cnt As Long, CB As CheckBox
        
        lrow = Sheets(1).Range("A" & Rows.Count).End(xlUp).Row
        Set rRange = Sheets(1).Range("E2:E" & lrow)
        
                  Cnt = 0
                For Each CB In ThisWorkbook.Sheets(2).CheckBoxes
                   If CB.Value = 1 Then
                    ReDim Preserve arrList(Cnt)
                    arrList(Cnt) = CB.Text
                    Cnt = Cnt + 1
                   End If
                Next
                 
                 If Cnt = 0 Then GoTo ShowAll
                 'Pass the array as criteria to filter Table 2
                 Sheets(1).ListObjects("Table1").Range.AutoFilter Field:=5, Criteria1:=arrList, Operator:=xlFilterValues
                Exit Sub
        
        ShowAll:
        
        Sheets(1).ListObjects("Table1").AutoFilter.ShowAllData
        End Sub
        
        Sub TestActiveX()
        
        Dim lrow As Long, rRange As Range, r As Range, arrList() As String, Cnt As Long, CB As OLEObject
        
        lrow = Sheets(1).Range("A" & Rows.Count).End(xlUp).Row
        Set rRange = Sheets(1).Range("E2:E" & lrow)
        
                  Cnt = 0
                For Each CB In ThisWorkbook.Sheets(2).OLEObjects
                   If TypeOf CB.Object Is MSForms.CheckBox Then
                        If CB.Object.Value = True Then
                            ReDim Preserve arrList(Cnt)
                            arrList(Cnt) = CB.Object.Caption
                            Cnt = Cnt + 1
                        End If
                   End If
                Next
                 
                 If Cnt = 0 Then GoTo ShowAll
                 'Pass the array as criteria to filter Table 2
                 Sheets(1).ListObjects("Table1").Range.AutoFilter Field:=5, Criteria1:=arrList, Operator:=xlFilterValues
                Exit Sub
        
        ShowAll:
        
        Sheets(1).ListObjects("Table1").AutoFilter.ShowAllData
        End Sub

4. Load Combobox on Workbook Open
  'MSForms Combobox
      Sheets("Sheet1").Shapes.Range(Array("Drop Down 1")).Select
       With Selection
           .ListFillRange = "$A$2:$A$7"
           .LinkedCell = ""
           .DropDownLines = 8
           .Display3DShading = False
       End With
       Application.Goto Range("A1")

  'ActiveX Combobox
      Sheets(1).ComboBox21.List = Sheets(1).Range("A2:A10").Value

5. '// Add centered checkboxes to all selected cells

   'ActiveSheet.DrawingObjects.Delete ' optional to delete all shapes when testing
   Dim c As Range, cb As CheckBox

   For Each c In Selection
       Set cb = c.Worksheet.CheckBoxes.Add(c.Left + c.Width / 2 - 8.25, _
               c.Top + c.Height / 2 - 8.25, 0, 0)  ' 8.25 is cb.Height / 2
       cb.Text = vbNullString                      ' to clear Caption
       cb.LinkedCell = c.Address(0, 0)             ' Example A1 instead of $A$1
       cb.Name = "cb" & cb.LinkedCell              ' optional
   Next

   Selection.NumberFormat = ";;;" ' optional to hide the cell values
   Selection = True ' optional to check all at once (or 'selection = [#N/A]' for all xlMixed)
   
6. '// Insert a checkox in each cell
   Sub AddCheckBoxes()

   Dim cb As CheckBox
   Dim myRange As Range, cel As Range
   Dim wks As Worksheet

   Set wks = Sheets("mySheet") 'adjust sheet to your needs

   Set myRange = wks.Range("A1:A10") ' adjust range to your needs

   For Each cel In myRange
       Set cb = wks.CheckBoxes.Add(cel.Left, cel.Top, 30, 6) 'you can adjust left, top, height, width to your needs
       With cb
           .Caption = ""
           .LinkedCell = cel.Address
       End With
   Next

   End Sub
