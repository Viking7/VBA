Function CountRegEx(ISIN As String, RegExpression As String)

    Dim RegEx As Object
    Set RegEx = CreateObject("vbscript.regexp")

    RegEx.Pattern = RegExpression
    RegEx.IgnoreCase = True
    RegEx.Global = True

    Dim Matches As Object
    Set Matches = RegEx.Execute(ISIN)

    CountRegEx = Matches.Count

End Function

Function ExtractRegEx(ByVal text As String, RegExpression As String) As String

Dim result As String
Dim allMatches As Object
Dim RE As Object
Set RE = CreateObject("vbscript.regexp")

RE.Pattern = RegExpression
RE.Global = True
RE.IgnoreCase = True
Set allMatches = RE.Execute(text)

If allMatches.Count <> 0 Then
    result = allMatches.Item(0).SubMatches.Item(0)
End If

ExtractRegEx = result

End Function

Function regExp(strInput As String, matchPattern As String, Optional ByVal outputPattern As String = "$0") As Variant
    
    Dim inputRegexObj As New VBScript_RegExp_55.regExp, outputRegexObj As New VBScript_RegExp_55.regExp, outReplaceRegexObj As New VBScript_RegExp_55.regExp
    Dim inputMatches As Object, replaceMatches As Object, replaceMatch As Object
    Dim replaceNumber As Integer

    With inputRegexObj
        .Global = True
        .MultiLine = True
        .IgnoreCase = False
        .Pattern = matchPattern
    End With
    With outputRegexObj
        .Global = True
        .MultiLine = True
        .IgnoreCase = False
        .Pattern = "\$(\d+)"
    End With
    With outReplaceRegexObj
        .Global = True
        .MultiLine = True
        .IgnoreCase = False
    End With

    Set inputMatches = inputRegexObj.Execute(strInput)
    If inputMatches.Count = 0 Then
        regEx = False
    Else
        Set replaceMatches = outputRegexObj.Execute(outputPattern)
        For Each replaceMatch In replaceMatches
            replaceNumber = replaceMatch.SubMatches(0)
            outReplaceRegexObj.Pattern = "\$" & replaceNumber

            If replaceNumber = 0 Then
                outputPattern = outReplaceRegexObj.Replace(outputPattern, inputMatches(0).Value)
            Else
                If replaceNumber > inputMatches(0).SubMatches.Count Then
                    'regex = "A to high $ tag found. Largest allowed is $" & inputMatches(0).SubMatches.Count & "."
                    regEx = CVErr(xlErrValue)
                    Exit Function
                Else
                    outputPattern = outReplaceRegexObj.Replace(outputPattern, inputMatches(0).SubMatches(replaceNumber - 1))
                End If
            End If
        Next
        regExp = outputPattern
    End If
End Function

Private Function AlphaNum(nm As String) As String

Dim a$, b$, c$, i As Integer
a$ = nm
For i = 1 To Len(a$)
    b$ = Mid(a$, i, 1)
    If b$ Like "[A-Z,a-z,0-9]" Then c$ = c$ & b$
Next i
AlphaNum = c$

End Function
