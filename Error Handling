1. '//List all runtime errors in Excel

Private WS As Worksheet

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Gets all the built-in runtime Errors: codes and descriptions
' Outputs them in the 1st Worksheet
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Public Sub GetErrorList()
    
    ' clear and initiate the output worksheet
    Set WS = ThisWorkbook.Sheets(1)
    WS.Cells.Clear
    Output 1, "Error Number", "Error Description"
    
    ' get the message for user-defined errors
    Dim UDErrNo As Integer: UDErrNo = 95
    Dim UDErrMsg As String
    On Error Resume Next
    Err.Raise UDErrNo
    UDErrMsg = Err.Description
    On Error GoTo 0
    
    ' test all error numbers and keep built-in errors
    Dim ErrNo As Long, MaxErrNo As Long
    Dim ErrMsg As String
    Dim Row As Long: Row = 2
    'MaxErrNo = 2 ^ 16 - 1 ' 65535
    MaxErrNo = 1000
    For ErrNo = 1 To MaxErrNo
        On Error Resume Next
        Err.Raise ErrNo
        ErrMsg = Err.Description
        On Error GoTo 0 ' clears Err object
        If ErrMsg <> UDErrMsg Or ErrNo = UDErrNo Then
            Output Row, ErrNo, ErrMsg
            Row = Row + 1
        End If
    Next ErrNo
    
    MsgBox (Row - 1) & " built-in errors found"
    
End Sub

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Writes the specified error code and description respectively
' in 1st and 2nd columns of the specified row
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Private Sub Output(Row As Long, ErrNo, ErrMsg As String)
    If WS Is Nothing Then Exit Sub
    With WS
        .Cells(Row, 1) = ErrNo
        .Cells(Row, 2) = ErrMsg
    End With
End Sub


2. '//Print Error message with error line
 
Sub a()
             On Error GoTo ErrorHandler
             DivisionByZero = 1 / 0
             Exit Sub
ErrorHandler:
          If Err.Number <> 0 Then
             Msg = "Error # " & Str(Err.Number) & " was generated by " _
         & Err.Source & Chr(13) & "Error Line: " & Erl & Chr(13) & Err.Description
             MsgBox Msg, , "Error", Err.HelpFile, Err.HelpContext
             End If
             Resume Next
          End Sub

3. '//Function to log process and memory usage at different stages
    Option Explicit

    Sub Heartbeat(LogText As String)
    '-----------------------------------------------------------------------------
    'Purpose    Enable logging where the program is
    'Expects    LogText The freetext log that describes what is being logged.
    '-----------------------------------------------------------------------------
    'Usage      Heartbeat "this text will end up in the text-file"
    '           Heartbeat GetProcessMemory("EXCEL.EXE")     'requires the GetProcessMemory function
    '                                                        http://stackoverflow.com/questions/17202892/to-find-the-memory-usage-of-a-particular-process  
    '-----------------------------------------------------------------------------
    '-----------------------------------------------------------------------------
    'Changelog
    'HANY 20140416
    '   Created
    '-----------------------------------------------------------------------------

    Dim fname As String
    Dim myLogText As String
    Dim myfilenumber As Integer


    'If there are any ' or " in the log-text, take them away.
myLogText = Replace(LogText, "'", "*")
myLogText = Replace(myLogText, """", "*")

'----------------------------------------------------
'Log in the text-file
'----------------------------------------------------
fname = "Mylogfile.log.txt"
myfilenumber = FreeFile
Open fname For Append As #myfilenumber
Print #myfilenumber, FormatLogTime(Now()) & "--" & LogText
Close #myfilenumber

End Sub

Function FormatLogTime(iDate As Date) As String
FormatLogTime = Right("0000" & Year(iDate), 4) _
              & Right("00" & Month(iDate), 2) _
              & Right("00" & Day(iDate), 2) _
              & " " _
              & Right("00" & Hour(iDate), 2) _
              & "." _
              & Right("00" & Minute(iDate), 2) _
              & "." _
              & Right("00" & Second(iDate), 2)

End Function
