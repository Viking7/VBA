1. '//Saving VBA Settings to registry

  Global myVariable as Integer
  Sub GetMyVariable
    myVariable = GetSetting("MyApplication", "MySettings", "myVariable", "0")
  End Sub
  Sub SaveMyVariable(newValue as Integer)
    call SaveSetting("MyApplication", "MySettings", "myVariable", newValue)
  End Sub


2. '// Break VBA Project Passwords

  To crack a 2007/2010 Excel VBA password:
    1. Change .xlsm extension to .zip
    2. Open the zipped folder and navigate into the “xl” folder
    3. Extract the vbaProject.bin file and open it in a Hex Editor (NPP has a plugin)
    4. Search for “DPB” and replace with “DPx”
    5. Replace the old vbaProject file with this new on in the zip folder (and re-zip)
    6. Change the file extension back to .xlsm
    7. Open workbook and ignore all warning messages
    8. Export the code modules and then re-add them (delete the old ones), or just add a new paswword for the project.
    
    
3. '//Break VBA Project password (32-bit)
    'https://stackoverflow.com/questions/1026483/is-there-a-way-to-crack-the-password-on-an-excel-vba-project/
    'Open the file(s) that contain your locked VBA Projects
    'Create a new xlsm file and store this code in Module1

    Option Explicit

    Private Const PAGE_EXECUTE_READWRITE = &H40

    Private Declare Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
            (Destination As Long, Source As Long, ByVal Length As Long)

    Private Declare Function VirtualProtect Lib "kernel32" (lpAddress As Long, _
            ByVal dwSize As Long, ByVal flNewProtect As Long, lpflOldProtect As Long) As Long

    Private Declare Function GetModuleHandleA Lib "kernel32" (ByVal lpModuleName As String) As Long

    Private Declare Function GetProcAddress Lib "kernel32" (ByVal hModule As Long, _
            ByVal lpProcName As String) As Long

    Private Declare Function DialogBoxParam Lib "user32" Alias "DialogBoxParamA" (ByVal hInstance As Long, _
            ByVal pTemplateName As Long, ByVal hWndParent As Long, _
            ByVal lpDialogFunc As Long, ByVal dwInitParam As Long) As Integer

    Dim HookBytes(0 To 5) As Byte
    Dim OriginBytes(0 To 5) As Byte
    Dim pFunc As Long
    Dim Flag As Boolean

    Private Function GetPtr(ByVal Value As Long) As Long
        GetPtr = Value
    End Function

    Public Sub RecoverBytes()
        If Flag Then MoveMemory ByVal pFunc, ByVal VarPtr(OriginBytes(0)), 6
    End Sub

    Public Function Hook() As Boolean
        Dim TmpBytes(0 To 5) As Byte
        Dim p As Long
        Dim OriginProtect As Long

        Hook = False

        pFunc = GetProcAddress(GetModuleHandleA("user32.dll"), "DialogBoxParamA")


        If VirtualProtect(ByVal pFunc, 6, PAGE_EXECUTE_READWRITE, OriginProtect) <> 0 Then

            MoveMemory ByVal VarPtr(TmpBytes(0)), ByVal pFunc, 6
            If TmpBytes(0) <> &H68 Then

                MoveMemory ByVal VarPtr(OriginBytes(0)), ByVal pFunc, 6

                p = GetPtr(AddressOf MyDialogBoxParam)

                HookBytes(0) = &H68
                MoveMemory ByVal VarPtr(HookBytes(1)), ByVal VarPtr(p), 4
                HookBytes(5) = &HC3

                MoveMemory ByVal pFunc, ByVal VarPtr(HookBytes(0)), 6
                Flag = True
                Hook = True
            End If
        End If
    End Function

    Private Function MyDialogBoxParam(ByVal hInstance As Long, _
            ByVal pTemplateName As Long, ByVal hWndParent As Long, _
            ByVal lpDialogFunc As Long, ByVal dwInitParam As Long) As Integer
        If pTemplateName = 4070 Then
            MyDialogBoxParam = 1
        Else
            RecoverBytes
            MyDialogBoxParam = DialogBoxParam(hInstance, pTemplateName, _
                               hWndParent, lpDialogFunc, dwInitParam)
            Hook
        End If
    End Function
    
    'In module 2
    Sub unprotected()
        If Hook Then
            MsgBox "VBA Project is unprotected!", vbInformation, "*****"
        End If
    End Sub

4. '// Break VBA Project passwords (64-bit)
  
    Option Explicit

    Private Const PAGE_EXECUTE_READWRITE = &H40

    Private Declare PtrSafe Sub MoveMemory Lib "kernel32" Alias "RtlMoveMemory" _
    (Destination As LongPtr, Source As LongPtr, ByVal Length As LongPtr)

    Private Declare PtrSafe Function VirtualProtect Lib "kernel32" (lpAddress As LongPtr, _
    ByVal dwSize As LongPtr, ByVal flNewProtect As LongPtr, lpflOldProtect As LongPtr) As LongPtr

    Private Declare PtrSafe Function GetModuleHandleA Lib "kernel32" (ByVal lpModuleName As String) As LongPtr

    Private Declare PtrSafe Function GetProcAddress Lib "kernel32" (ByVal hModule As LongPtr, _
    ByVal lpProcName As String) As LongPtr

    Private Declare PtrSafe Function DialogBoxParam Lib "user32" Alias "DialogBoxParamA" (ByVal hInstance As LongPtr, _
    ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, _
    ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer

    Dim HookBytes(0 To 5) As Byte
    Dim OriginBytes(0 To 5) As Byte
    Dim pFunc As LongPtr
    Dim Flag As Boolean

    Private Function GetPtr(ByVal Value As LongPtr) As LongPtr
        GetPtr = Value
    End Function

    Public Sub RecoverBytes()
        If Flag Then MoveMemory ByVal pFunc, ByVal VarPtr(OriginBytes(0)), 6
    End Sub

    Public Function Hook() As Boolean
        Dim TmpBytes(0 To 5) As Byte
        Dim p As LongPtr
        Dim OriginProtect As LongPtr

        Hook = False

        pFunc = GetProcAddress(GetModuleHandleA("user32.dll"), "DialogBoxParamA")


        If VirtualProtect(ByVal pFunc, 6, PAGE_EXECUTE_READWRITE, OriginProtect) <> 0 Then

            MoveMemory ByVal VarPtr(TmpBytes(0)), ByVal pFunc, 6
            If TmpBytes(0) <> &H68 Then

                MoveMemory ByVal VarPtr(OriginBytes(0)), ByVal pFunc, 6

                p = GetPtr(AddressOf MyDialogBoxParam)

                HookBytes(0) = &H68
                MoveMemory ByVal VarPtr(HookBytes(1)), ByVal VarPtr(p), 4
                HookBytes(5) = &HC3

                MoveMemory ByVal pFunc, ByVal VarPtr(HookBytes(0)), 6
                Flag = True
                Hook = True
            End If
        End If
    End Function

    Private Function MyDialogBoxParam(ByVal hInstance As LongPtr, _
    ByVal pTemplateName As LongPtr, ByVal hWndParent As LongPtr, _
    ByVal lpDialogFunc As LongPtr, ByVal dwInitParam As LongPtr) As Integer

        If pTemplateName = 4070 Then
            MyDialogBoxParam = 1
        Else
            RecoverBytes
            MyDialogBoxParam = DialogBoxParam(hInstance, pTemplateName, _
                       hWndParent, lpDialogFunc, dwInitParam)
            Hook
        End If
    End Function
    
    Sub unprotected()
      If Hook Then
          MsgBox "VBA Project is unprotected!", vbInformation, "*****"
      End If
    End Sub

5.'// Break VBA sheet passwords
Sub WorksheetPasswordBreaker()

'Breaks worksheet password protection.

Dim i As Integer, j As Integer, k As Integer
Dim l As Integer, m As Integer, n As Integer
Dim i1 As Integer, i2 As Integer, i3 As Integer
Dim i4 As Integer, i5 As Integer, i6 As Integer
On Error Resume Next
For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
ActiveSheet.Unprotect Chr(i) & Chr(j) & Chr(k) & _
Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
If ActiveSheet.ProtectContents = False Then
MsgBox "One usable password is " & Chr(i) & Chr(j) & _
Chr(k) & Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & _
Chr(i3) & Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
Exit Sub
End If
Next: Next: Next: Next: Next: Next
Next: Next: Next: Next: Next: Next
End Sub

6. Break Workbook Passwords:

  Sub WorkbookPasswordBreaker()
      'Breaks worksheet password protection.
      Dim i As Integer, j As Integer, k As Integer
      Dim l As Integer, m As Integer, n As Integer
      Dim i1 As Integer, i2 As Integer, i3 As Integer
      Dim i4 As Integer, i5 As Integer, i6 As Integer
      On Error Resume Next
      For i = 65 To 66: For j = 65 To 66: For k = 65 To 66
      For l = 65 To 66: For m = 65 To 66: For i1 = 65 To 66
      For i2 = 65 To 66: For i3 = 65 To 66: For i4 = 65 To 66
      For i5 = 65 To 66: For i6 = 65 To 66: For n = 32 To 126
      ThisWorkbook.Unprotect Chr(i) & Chr(j) & Chr(k) & _
          Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & Chr(i3) & _
          Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
      If ThisWorkbook.ProtectStructure = False Then
          MsgBox "One usable password is " & Chr(i) & Chr(j) & _
              Chr(k) & Chr(l) & Chr(m) & Chr(i1) & Chr(i2) & _
              Chr(i3) & Chr(i4) & Chr(i5) & Chr(i6) & Chr(n)
           Exit Sub
      End If
      Next: Next: Next: Next: Next: Next
      Next: Next: Next: Next: Next: Next
  End Sub



7. '//List Macro shortcuts assigned using the Macro Dialog box

  Option Explicit
  'MUST set to Trust Access to the VBA Project Object Model
  '  in Excel Options
  'Set reference to:
  'Microsoft Visual Basic for Applications Extensibility
  'Microsoft Scripting Runtime
  'Microsoft VBScript Regular Expressions 5.5
  Sub MacroShortCutKeys()
      Dim VBProj As VBIDE.VBProject
      Dim VBComp As VBIDE.VBComponent
      Dim CodeMod As CodeModule
      Dim LineNum As Long
      Dim ProcKind As VBIDE.vbext_ProcKind
      Dim sProcName As String, sShortCutKey As String
      Const FN As String = "C:\Temp\Temp.txt"
      Dim S As String
      Dim FSO As FileSystemObject
      Dim TS As TextStream
      Dim RE As RegExp, MC As MatchCollection, M As Match
  
  Set RE = New RegExp
  With RE
      .Global = True
      .IgnoreCase = True
      .Pattern = "Attribute\s+(\w+)\.VB_ProcData\.VB_Invoke_Func = ""(\S+)(?=\\)"
  End With
  
  Set FSO = New FileSystemObject
  Set VBProj = ActiveWorkbook.VBProject
  For Each VBComp In VBProj.VBComponents
      Select Case VBComp.Type
          Case Is = vbext_ct_StdModule
              VBComp.Export FN
              Set TS = FSO.OpenTextFile(FN, ForReading, Format:=TristateFalse)
              S = TS.ReadAll
              TS.Close
              FSO.DeleteFile (FN)
              If RE.Test(S) = True Then
                  Set MC = RE.Execute(S)
                  For Each M In MC
                      Debug.Print VBComp.Name, M.SubMatches(0), M.SubMatches(1)
                  Next M
              End If
      End Select
  Next VBComp
  End Sub

8. '// Optimize VBA codes by changing Application settings

  Sub OptimizeVBA(isOn As Boolean)
      Application.Calculation = IIf(isOn, xlCalculationManual, xlCalculationAutomatic)
      Application.EnableEvents = Not (isOn)
      Application.ScreenUpdating = Not (isOn)
      ActiveSheet.DisplayPageBreaks = Not (isOn)
  End Sub
